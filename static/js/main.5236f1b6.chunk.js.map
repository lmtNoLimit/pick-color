{"version":3,"sources":["assets/images/intro.svg","components/AppHeader.js","components/Home/Jumbotron.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Layout","AppHeader","useState","current","setCurrent","className","onClick","e","key","selectedKeys","mode","Item","Jumbotron","span","src","IntroImage","alt","Home","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,mC,0MCGnCC,EAAWC,IAAXD,OAiCOE,EA/BG,WAAO,IAAD,EACQC,mBAAS,QADjB,mBACfC,EADe,KACNC,EADM,KAMtB,OACE,kBAACL,EAAD,CAAQM,UAAU,sCAChB,wBAAIA,UAAU,qBAAd,QACA,kBAAC,IAAD,CACEC,QARuB,SAAAC,GAC3BH,EAAWG,EAAEC,MAQTC,aAAc,CAACN,GACfO,KAAK,cAEL,kBAAC,IAAKC,KAAN,CAAWN,UAAU,2BAA2BG,IAAI,QAApD,QAGA,kBAAC,IAAKG,KAAN,CAAWN,UAAU,2BAA2BG,IAAI,SAApD,YAGA,kBAAC,IAAKG,KAAN,CAAWN,UAAU,2BAA2BG,IAAI,WAApD,cAGA,kBAAC,IAAKG,KAAN,CAAWN,UAAU,2BAA2BG,IAAI,OAApD,W,oCCLOI,EAnBG,WAChB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,IACT,yBAAKC,IAAKC,IAAYC,IAAI,QAAQX,UAAU,aAE9C,kBAAC,IAAD,CAAKQ,KAAM,IACT,uBAAGR,UAAU,oDAAb,kCACkC,IAChC,0BAAMA,UAAU,mBAAhB,WAEF,4BAAQA,UAAU,4FAAlB,eCFOY,EATF,WACX,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCYSC,MAdf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,IAAD,CAAQA,UAAU,mBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,KAAK,IAAIC,UAAWH,S,qBCAnBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5236f1b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/intro.a6869d36.svg\";","import React, { useState } from \"react\";\r\nimport { Menu, Layout } from \"antd\";\r\n\r\nconst { Header } = Layout;\r\n\r\nconst AppHeader = () => {\r\n  const [current, setCurrent] = useState(\"home\");\r\n  const handleChangeMenuItem = e => {\r\n    setCurrent(e.key);\r\n  };\r\n\r\n  return (\r\n    <Header className='flex justify-between bg-white z-50'>\r\n      <h1 className='text-xl font-bold'>LOGO</h1>\r\n      <Menu\r\n        onClick={handleChangeMenuItem}\r\n        selectedKeys={[current]}\r\n        mode='horizontal'\r\n      >\r\n        <Menu.Item className='text-black font-semibold' key='home'>\r\n          Home\r\n        </Menu.Item>\r\n        <Menu.Item className='text-black font-semibold' key='about'>\r\n          About Us\r\n        </Menu.Item>\r\n        <Menu.Item className='text-black font-semibold' key='contact'>\r\n          Contact Us\r\n        </Menu.Item>\r\n        <Menu.Item className='text-black font-semibold' key='faq'>\r\n          FaQs\r\n        </Menu.Item>\r\n      </Menu>\r\n    </Header>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import React from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport IntroImage from \"assets/images/intro.svg\";\r\n\r\nconst Jumbotron = () => {\r\n  return (\r\n    <Row>\r\n      <Col span={12}>\r\n        <img src={IntroImage} alt='Intro' className='w-10/12' />\r\n      </Col>\r\n      <Col span={12}>\r\n        <p className='mt-32 uppercase font-black text-5xl break-normal'>\r\n          You haven't found your favorite{\" \"}\r\n          <span className='text-orange-700'>color?</span>\r\n        </p>\r\n        <button className='mt-5 py-3 px-20 text-3xl font-semibold text-white rounded-full bg-orange-700 border-none'>\r\n          See more\r\n        </button>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Jumbotron;\r\n","import React, { Fragment } from \"react\";\r\nimport Header from \"../AppHeader\";\r\nimport Jumbotron from \"./Jumbotron\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Fragment>\r\n      <Header />\r\n      <Jumbotron />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Home from \"./components/Home/Home\";\nimport { Layout } from \"antd\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Layout className='layout bg-white'>\n        <Router>\n          <Switch>\n            <Route path='/' component={Home} />\n          </Switch>\n        </Router>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\nimport \"./assets/css/main.css\";\nimport \"./assets/css/custom.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}